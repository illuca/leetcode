* python
** 输入 n 行
#+begin_src python
a = [map(f, raw_input().split()) for i in range(n)]
#+end_src
** 多样例输入 EOF
使用sys.stdin来代替C语言的while(scanf("%d",&num)!=EOF)
#+begin_src python
import sys
for line in sys.stdin:
    print (int(line)**2)
#+end_src
** 使用切片去空格
#+begin_src python
lst = [1, 2, 3, 4, 5]
strr = ''  # 创建一个空字符串
for i in range(len(lst)):
    strr += str(lst[i])+' '  # 数字后面加了一个空格
print(strr[:-1])  # 使用切片，去掉了最后一个空格s
#+end_src
** 字典默认值
#+begin_src python
dic = {'name':'Tim', 'age':23}
e
dic['workage'] = dic.get('workage',0) + 1
print(dic)
#+end_src
** for else
#+begin_src python
python {cmd=python3}
for x in range(1,5):
    if x == 5:
        print ('find 5')
        break
else:
    print ('can not find 5!')
    #can not find 5!
#+end_src

#+begin_src python
find = False
for x in range(1,5):
    if x == 5:
        find = True
        print ('find 5')
        break
if not find:
    print ('can not find 5!')
    #can not find 5!
#+end_src

** 函数参数
#+begin_src python
"""
无需nodes=set()
self._findTarget(root,nodes)
"""
class Solution(object):
    def findTarget(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: bool
        """
        if not root:
            return False

        return self._findTarget(root, set(), k)
    
    def _findTarget(self, node, nodes, k):
        if not node:
            return False

        complement = k - node.val
        if complement in nodes:
            return True

        nodes.add(node.val)

        return self._findTarget(node.left, nodes, k) or self._findTarget(node.right, nodes, k)
#+end_src
* tree
** 递归创建
#+begin_src python
def foo(i):
    if i <= 10:
        return 1, foo(i+1)
foo(1)
#+end_src

#+begin_src python

def create():
    return root, create(root.left), create(root.right)
#+end_src

** dfs有left和right
if left and right
必须两个是同步的, 才好判断
否则dfs只有一个root

** dfs感悟

class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        def dfs(rt,lev=0):
            if not rt or diff:
                return lev
            
            lev_l=dfs(rt.left,lev+1)
            lev_r=dfs(rt.right,lev+1)    
            
            diff=abs(lev_l-lev_r)
            
            return lev

- 有两个出口
- dfs一旦到None, 在返回的过程中,是无视if not rt的
- lev_l获取值的渠道有两个,孩子为None的父亲从not root获取, 非None的父亲从最下面的return lev获取
  所以两个return必须要保持类型一致

#+begin_src python
def check(node):
    if node == None:
        return (0, True)
    l_depth, l_balanced = check(node.left)
    r_depth, r_balanced = check(node.right)
    return max(l_depth, r_depth) + 1, l_balanced and r_balanced and abs(l_depth - r_depth) <= 1
#+end_src

最后一行的max...等价于
self.flag=l_balanced and r_balanced
if self.flag==True and abs(l_depth-r_depth)<=1:
    return max(l_depth,r_depth)

** 求最大深度
#+begin_src python

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if root is None:
            return 0
        l_depth=self.minDepth(root.left)
        r_depth=self.minDepth(root.right)
        return max(l_depth,r_depth)+1
#+end_src

- return 0意味着None是地平线
** 累加
到中途满足就退出
if not root:
    return 0
而如果是必须到叶子才算数:
if not root:
    return sum==0 

